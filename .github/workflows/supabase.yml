name: Apply Supabase migrations

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/**'
      - 'supabase/functions/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'GitHub Environment to use (secrets scoped)'
        required: false
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Bind job to a GitHub Environment so environment-scoped secrets are used
    environment:
      name: ${{ inputs.environment || 'production' }}
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SITE_URL: agents-sandbox.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify required secrets
        run: |
          set -euo pipefail
          : "${SUPABASE_ACCESS_TOKEN:?SUPABASE_ACCESS_TOKEN is required}"
          : "${SUPABASE_DB_PASSWORD:?SUPABASE_DB_PASSWORD is required}"
          # Accept either SUPABASE_PROJECT_REF or SUPABASE_PROJECT_ID
          PROJECT_REF="${SUPABASE_PROJECT_REF:-${SUPABASE_PROJECT_ID:-}}"
          if [ -z "$PROJECT_REF" ]; then
            echo "Missing SUPABASE_PROJECT_REF or SUPABASE_PROJECT_ID secret" >&2
            exit 1
          fi
          echo "PROJECT_REF=$PROJECT_REF" >> "$GITHUB_ENV"
          echo "Secrets present. Using environment: '${{ inputs.environment || 'production' }}' and project: $PROJECT_REF"

      - name: Link to Supabase project
        run: supabase link --project-ref "$PROJECT_REF"
        working-directory: ./supabase

      - name: Show linked project status
        run: supabase link status
        working-directory: ./supabase

      - name: List migrations for context
        run: |
          pwd
          ls -la migrations || true
        working-directory: ./supabase

      - name: Apply database migrations
        run: supabase db push --include-all --debug
        working-directory: ./supabase

      - name: Deploy Edge Functions
        run: |
          for dir in $(find functions -maxdepth 1 -mindepth 1 -type d \
            ! -name '_*' ! -name 'lib'); do
            supabase functions deploy $(basename "$dir") --no-verify-jwt
          done
        working-directory: ./supabase
